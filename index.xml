<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Ech0 Security Blog</title>
        <link>https://ech0.re/</link>
        <description>Security blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>me@ech0.re (Ech0)</managingEditor>
            <webMaster>me@ech0.re (Ech0)</webMaster><lastBuildDate>Sat, 09 Mar 2024 07:35:06 &#43;0000</lastBuildDate>
            <atom:link href="https://ech0.re/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Write-up: ActiveX controller exploitation</title>
    <link>https://ech0.re/posts/active-x-exploitation/</link>
    <pubDate>Sun, 29 May 2022 03:22:29 &#43;0200</pubDate>
    <author>Ech0</author>
    <guid>https://ech0.re/posts/active-x-exploitation/</guid>
    <description><![CDATA[1. Introduction Warning This post is intended for intermediate or experienced people, as I will not explain the basics of reverse engineering or exploitation. This is probably the longest write-up you&rsquo;ll see on this blog. The reason is simple: I will show you the whole processus of vulnerability research, to full exploitation of a Windows OCX Controller, including failing paths (that are very interesting).
I will go from a simple CVE number, with no existing public exploit and not much information on the internet, to finding the vulnerability and exploiting it to run arbitrary code on the operating system.]]></description>
</item>
<item>
    <title>How to start in cybersecurity</title>
    <link>https://ech0.re/posts/how-to-start/</link>
    <pubDate>Fri, 27 May 2022 20:53:00 &#43;0200</pubDate>
    <author>Ech0</author>
    <guid>https://ech0.re/posts/how-to-start/</guid>
    <description><![CDATA[Every person in this community was once a begginer and it&rsquo;s usually a hard domain to begin with if you&rsquo;re not guided.
I will try to guide you through this article and give you some tips to start your cybersecurity journey.
This article is for beginners.
1. The mindset First of all, before even talking about how to begin and where, you should answer this question: why?
Typically:
Why do you want to learn cybersecurity?]]></description>
</item>
<item>
    <title>Packing: Dropping from resources</title>
    <link>https://ech0.re/posts/packing-resources/</link>
    <pubDate>Fri, 15 Apr 2022 18:39:15 &#43;0200</pubDate>
    <author>Ech0</author>
    <guid>https://ech0.re/posts/packing-resources/</guid>
    <description><![CDATA[Warning The knowledge acquired in this article is for strictly educational purposes.
You are not allowed to use tools or techniques for malicious purposes: it is immoral and illegal.
If you&rsquo;re not sure what you&rsquo;re doing, don&rsquo;t.
I cannot be held responsible for any misuse you may make of this knowledge.
In this new series of articles &ldquo;packing&rdquo;, I will present to you various key technical points used by packers.]]></description>
</item>
<item>
    <title>Kernel: Module development</title>
    <link>https://ech0.re/posts/kernel-module-development/</link>
    <pubDate>Tue, 05 Apr 2022 11:31:15 &#43;0200</pubDate>
    <author>Ech0</author>
    <guid>https://ech0.re/posts/kernel-module-development/</guid>
    <description><![CDATA[We have seen previously how to develop and integrate a system call into the Linux kernel. Now we are going to look at another form of code execution in ring 0 (kernel-land): the Linux module system.
Note Don&rsquo;t worry: it&rsquo;s totally different from a system call, both in terms of how it works and how to integrate/test it. There are plenty of new concepts to learn here and no redundancy with the article on system calls.]]></description>
</item>
<item>
    <title>Kernel: System call development</title>
    <link>https://ech0.re/posts/kernel-syscall-development/</link>
    <pubDate>Fri, 25 Mar 2022 00:07:09 &#43;0200</pubDate>
    <author>Ech0</author>
    <guid>https://ech0.re/posts/kernel-syscall-development/</guid>
    <description><![CDATA[In this article we will see how to:
Develop a syscall in C Compile it with the Linux kernel Charge it in the syscalls table Call it from user-land In other terms: we will add our own syscall to the Linux kernel.
1. Prerequisites If you want to follow the development and test by yourself, there are a few prerequisites.
Operating system running on a relatively recent Linux kernel. Usual development tools (gcc, make, &hellip;) A text editor (vim, VSCode, &hellip;) Warning In order to test the system call we will recompile the current Linux kernel and boot on it.]]></description>
</item>
</channel>
</rss>
